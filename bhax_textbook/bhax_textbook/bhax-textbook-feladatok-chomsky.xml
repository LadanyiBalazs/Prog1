<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Chomsky!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Decimálisból unárisba átváltó Turing gép</title>
        <para>
            Állapotátmenet gráfjával megadva írd meg ezt a gépet!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/LadanyiBalazs/Prog1/blob/master/chomsky/unaris.c">https://github.com/LadanyiBalazs/Prog1/blob/master/chomsky/unaris.c</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat: Az i-t felvesszük 0-nak és addig léptetjük amég egyenlő nem lesz az adott számmal, majd kiírunk annyi "|" jelet, ahányszor léptettük. Vagyis amekkora a szám, annyi "|" jelet rakunk.
        </para>
    </section>        
        
    <section>
        <title>Az a<superscript>n</superscript>b<superscript>n</superscript>c<superscript>n</superscript> nyelv nem környezetfüggetlen</title>
        <para>
            Mutass be legalább két környezetfüggő generatív grammatikát, amely ezt a nyelvet generálja!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat: Passzolva Udprog SMNIST for HUMANS lvl 6 alapján.
        </para>
    </section>        
                
    <section>
        <title>Hivatkozási nyelv</title>
        <para>
            A <citation>KERNIGHANRITCHIE</citation> könyv C referencia-kézikönyv/Utasítások melléklete alapján definiáld 
            BNF-ben a C utasítás fogalmát!
            Majd mutass be olyan kódcsipeteket, amelyek adott szabvánnyal nem fordulnak (például C89), mással (például C99) igen.
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat: A két fordítási szabvány, vagyis az C99 (ISO) és a C89 (ANSI) közötti különbséget legkönnyebben en for() ciklusban lehet bemutatni. C99 szerint a for() ciklusban egyszerre lehet deklarálni és léptetni is a változónkat. C89-ben ugyan ezt nem tehetjük meg. Ahhoz, hogy melyik szabványt alkalmazzuk, fordításkor a végére kell írnunk, hogy -std=c99 vagy -std=c89.
        </para>
    </section>                     

    <section>
        <title>Saját lexikális elemző</title>
        <para>
            Írj olyan programot, ami számolja a bemenetén megjelenő valós számokat! 
            Nem elfogadható olyan megoldás, amely maga olvassa betűnként a bemenetet, 
            a feladat lényege, hogy lexert használjunk, azaz óriások vállán álljunk és ne kispályázzunk!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  <link xlink:href="https://github.com/LadanyiBalazs/Prog1/blob/master/chomsky/lex.l">https://github.com/LadanyiBalazs/Prog1/blob/master/chomsky/lex.l</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat: Meg kell határoznunk, hogy a lexerünk miként kategorizálja az egyes karaktereket, illetve stringeket. 
            Először includoljuk a C nyelvben használt könyvtárat, ls felvesszük a változókat, amik számolni fogják, hogy a karakterekből és számokból mennyi fordul elő.
            Meg kell adnunk a lexerünknek, hogy milyen karakterhalmazokra mit adjon válaszul. Először az egyjegyű számokat nézi, aztán a betűket, a többi karaktert, a többjegyű számokat,majd a törtszámokat és végül a szavakat.
            A végén a programunk lezárja magát és kiirja a megoldást.
        </para>
    </section>                     

    <section>
        <title>l33t.l</title>
        <para>
            Lexelj össze egy l33t ciphert!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  <link xlink:href="https://github.com/LadanyiBalazs/Prog1/blob/master/chomsky/l33t.l">https://github.com/LadanyiBalazs/Prog1/blob/master/chomsky/l33t.l</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat: Meg kell határoznunk, hogy milyen karaktereket, milyen karakterekre cseréljen ki. A felhasználónak be kell gépelnie egy 50 karakteres szöveget, amit mi felveszünk egy char változóba. A kapott stringet karakterenként vizsgáljuk. A switch függvénnyel kicseréltetjük a kicserélendő karaktereket, végül kiíratjuk a végeredményt.
        </para>
<para>
<figure>
	<title>A program futása</title>
	<mediaobject>
		<imageobject>
		<imagedata fileref="img/leet.png" format="PNG"/>
		</imageobject>
	</mediaobject>
	</figure>
</para>
<para>Tutorált: Ilosvay Áron</para>
    </section>                     


    <section>
        <title>A források olvasása</title>
        <para>
            Hogyan olvasod, hogyan értelmezed természetes nyelven az alábbi kódcsipeteket? Például
            <programlisting><![CDATA[if(signal(SIGINT, jelkezelo)==SIG_IGN)
    signal(SIGINT, SIG_IGN);]]></programlisting>
            Ha a SIGINT jel kezelése figyelmen kívül volt hagyva, akkor ezen túl is legyen
            figyelmen kívül hagyva, ha nem volt figyelmen kívül hagyva, akkor a jelkezelo függvény
            kezelje. (Miután a <command>man 7 signal</command> lapon megismertem a SIGINT jelet, a
            <command>man 2 signal</command> lapon pedig a használt rendszerhívást.)
        </para>

        <caution>
            <title>Bugok</title>
            <para>
                Vigyázz, sok csipet kerülendő, mert bugokat visz a kódba! Melyek ezek és miért? 
                Ha nem megy ránézésre, elkapja valamelyiket esetleg a splint vagy a frama?
            </para>
        </caution>
            
        <orderedlist numeration="lowerroman">
            <listitem>                                    
                <programlisting><![CDATA[if(signal(SIGINT, SIG_IGN)!=SIG_IGN)
    signal(SIGINT, jelkezelo);]]></programlisting>
            </listitem>
            <listitem>                                    
                <programlisting><![CDATA[for(i=0; i<5; ++i)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<5; i++)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<5; tomb[i] = i++)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<n && (*d++ = *s++); ++i)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(a, ++a), f(++a, a));]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(a), a);]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(&a), a);]]></programlisting>            
            </listitem>
        </orderedlist>
        <para>
            Megoldás forrása:  <link xlink:href="https://github.com/LadanyiBalazs/Prog1/blob/master/chomsky/signal.c">https://github.com/LadanyiBalazs/Prog1/blob/master/chomsky/signal.c</link>
        </para>

        <para>
            Megoldás videó: 
        </para>

        <para>
            Tanulságok, tapasztalatok, magyarázat: A signal manuálja leírja, hogy 2 értékre van szükségünk, egy signalra és egy handlerre. A signalunk ebben az esetben a 2-es, azaz a terminate signal, amit a CTRL+C gombkombinációval adhatunk ki Linux alatt. A voiddal megírjuk a kezelő függvényt, hogy a függvényünk kérjen egy int változót, ami tárolja az elkapott signal számát. A pritf függvényen belül megadhatjuk mit írjon ki ha le akarjuk lőni.
        </para>

    </section>                     

    <section>
        <title>Logikus</title>
        <para>
            Hogyan olvasod természetes nyelven az alábbi Ar nyelvű formulákat?
        </para>
        <programlisting language="tex"><![CDATA[$(\forall x \exists y ((x<y)\wedge(y \text{ prím})))$ 

$(\forall x \exists y ((x<y)\wedge(y \text{ prím})\wedge(SSy \text{ prím})))$ 

$(\exists y \forall x (x \text{ prím}) \supset (x<y)) $ 

$(\exists y \forall x (y<x) \supset \neg (x \text{ prím}))$
]]></programlisting>        
        <para>
            Megoldás forrása: https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX
        </para>

        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/ZexiPy3ZxsA">https://youtu.be/ZexiPy3ZxsA</link>, <link xlink:href="https://youtu.be/AJSXOQFF_wk">https://youtu.be/AJSXOQFF_wk</link>
        </para>

        <para>
            Tanulságok, tapasztalatok, magyarázat: 1) Minden x-re van olyan y, hogy x kisebb mint y, és akkor y prím. Ez annyit jelent, hogy sok prímszám létezik.
            2) Minden x-re van olyan y, hogy x kisebb mint y, és akkor y ikerprím. Ez annyit jelent, hogy sok ikerprím létezik.
            3) Van olyan y, amire minden x prím, ebből következik, hogy x kisebb mint y.
            4) Van olyan y, amire minden x nagyobb, mint y, ebből következik, hogy x nem prím.
            A 3) és 4) annyit jelent, hogy véges sok prímszám van.
        </para>
    </section>                                                                                                                                                                            

    <section>
        <title>Deklaráció</title>
            
        <para>
            Vezesd be egy programba (forduljon le) a következőket: 
        </para>

        <itemizedlist>
            <listitem>
                <para>egész</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutató</para>                        
            </listitem>
            <listitem>
                <para>egész referenciája</para>                        
            </listitem>
            <listitem>
                <para>egészek tömbje</para>                        
            </listitem>
            <listitem>
                <para>egészek tömbjének referenciája (nem az első elemé)</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatók tömbje</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvény</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvényre mutató mutató</para>                        
            </listitem>
            <listitem>
                <para>egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvény</para>                        
            </listitem>            
            <listitem>
                <para>függvénymutató egy egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvényre</para>                        
            </listitem>            
        </itemizedlist>            

       <para>
            Mit vezetnek be a programba a következő nevek?
        </para>

        <itemizedlist>
            <listitem>
                <programlisting><![CDATA[int a;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *b = &a;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int &r = a;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int c[5];]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (&tr)[5] = c;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *d[5];]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *h ();]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *(*l) ();]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (*v (int c)) (int a, int b)]]></programlisting>            
            </listitem>            
            <listitem>
                <programlisting><![CDATA[int (*(*z) (int)) (int, int);]]></programlisting>            
            </listitem>            
        </itemizedlist>       


        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat: A fent látható deklarációt, ha belerakjuk egy mainbe, lefordul.
            Az int (integer) a programozási nyelvben az egészekre vonatkozó változó.
        </para>
    </section>                     


</chapter>                
