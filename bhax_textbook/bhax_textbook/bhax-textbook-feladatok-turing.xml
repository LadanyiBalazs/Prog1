<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely  
            100 százalékban minden magot!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  <link xlink:href='https://github.com/LadanyiBalazs/Prog1/tree/master/turing/v%C3%A9gtelenciklus'>https://github.com/LadanyiBalazs/Prog1/tree/master/turing/v%C3%A9gtelenciklus</link>              
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat: Az első dolgunk, hogy egy végtelen ciklust csinálunk, ami leterheli az egyik magunkat maximumra.
            Ahhoz, hogy a terhelést megszüntessük, be kell iktatnunk egy sleep() függvényt, és ehhez includolnunk kell az unistd.h könyvtárat.
            Végül ha az összes magot akarjuk dolgoztatni, szükségünk van az OpenMp-re. Includeolnunk kell az omp.h könyvtárat és hozzá kell írnunk
            a #pragma omp parallel a kódunkhoz, és azon belül kell elhelyezni a végtelen ciklust.
        </para>    
        <programlisting language="c"><![CDATA[
        #include <stdio.h>
        #include <omp.h>
        int main() {
        #pragma omp parallel { /* ezzel tudjuk kiküldeni a terhelést minden magra */
        while(1){}
        }
        return 0;
        }
    ]]></programlisting>
    </section>        
        
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne vlgtelen ciklus:              
        </para>
        <programlisting language="c"><![CDATA[Program T100
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	main(Input Q)
	{
		Lefagy(Q)
	}
}]]></programlisting>            
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudókódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>            
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>  
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épőlő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>            
        <para>
            Mit for kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?
                                
            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat: Ilyen Lefagy függvényt nem lehet írni, mert ha a T1000 program lefagy, akkor a függvényünk nem fagy le és true értéket ad vissza, de ha a T1000 nem fagy le, akkor a programunk le fog fagy.
        </para>
    </section>        
                
    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
        </para>
        <para>
            Megoldás forrása:  <link xlink:href='https://github.com/LadanyiBalazs/Prog1/blob/master/turing/valtozocsere.c'>https://github.com/LadanyiBalazs/Prog1/blob/master/turing/valtozocsere.c</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat: Felveszünk két változót, elnevezzük a-nak, és b-nek. Az a érték helyére felvesszük az a+b értékét, aztán b helyére a már megváltoztatott a-b értékét, végül az a helyére felvesszük a már megváltoztatott a-b értékét, és ezzel felcseréltük a két változó értékét.
        </para>
    </section>                     

    <section>
        <title>Labdapattogás</title>
        <para>
            Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon! (Hogy mit értek
            pattogtatás alatt, alább láthatod a videókon.)
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
        </para>
        <para>
            Megoldás forrása:  <link xlink:href="https://github.com/LadanyiBalazs/Prog1/tree/master/https://github.com/LadanyiBalazs/Prog1/tree/master/turing/labdapattog">https://github.com/LadanyiBalazs/Prog1/tree/master/turing/labdapattog</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat: Először le kell kérnünk az ablak méretét az initscr() fügvénnyel majd segédváltozók segítségével meghatározzuk a labda helyzetét, a lépegetési értékét, és a terminálablakunk méretét. Hogy a programunk érzékelje a terminálablak méretének változtatását fel kell vennünk egy getmaxyx() függvényt, majd kirajzoljuk a labdát az mvprintw() függvénnyel, ahol megadjuk a karakterünket is, ami ebben az esetben egy O betű. A refrest() függvénnyel frissítjük a programot, hogy a labda minden frissülésnél lépjen egyet. A usleep() függvénnyel pedig beállíthatjuk a frissülés sűrűségét, így a labda mozgásának gyorsaságát. If függvényekkel vizsgáljuk, hogy elérte-e a labda a terminálablakunk szélét, és ha elérte akkor az ellenkező irányba fog haladni amit a negatív értékekkel adtunk meg neki. Fordításnál hozzá kell rakni egy -lncurses kapcsolót a végére. Ez a feladat megírható if() függvény nélkül is, és akkor nem figyeli a terminálablak széleit.
        </para>
    </section>                     

    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
            Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
            Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában! 
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/LadanyiBalazs/Prog1/blob/master/turing/sz%C3%B3hossz.c">https://github.com/LadanyiBalazs/Prog1/blob/master/turing/sz%C3%B3hossz.c</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat:
            Adott egy szavunk, ami jelen esetben az 1, és ezt felvesszük az egyik változónkba. Ezt a változót addig shifteljük egyessével,
            amíg nullát kapunk és be nem telik a memóriánk. Ez után már nem tudunk többet írni, és megkapjuk a szó méretét bitben.
        </para>
        <para>
            Fordítás: gcc bitshift.c -o bitshift
        </para>
              <para>
                  Futtatás: ./bitshift
              </para>
        
    </section>                     

    <section>
        <title>Helló, Google!</title>
        <para>
            Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
            értékét!
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/LadanyiBalazs/Prog1/blob/master/turing/pagerank.c">https://github.com/LadanyiBalazs/Prog1/blob/master/turing/pagerank.c</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat: A Pagerank algoritmus lényege, hogy kiszámolja egy oldalra-rá mutató, és arról kifele mutató linkek értékét. Ezzen az algoritmussal dolgozik a Google is.
            Minden weboldalhoz egy számot rendel, ami segítségével rangsorolja őket. Ha egy oldalról hiperlink segítségével átkattintunk egy másik oldalra, akkor az a másik oldal ezért "pontot" kap. 
            Most nekünk 4 oldalunk van, aminek ki kell számolni a pagerank értékét, amik egy négyelemű tömbben helyezkednek el.
            Három funkciónk van: a kiir, a tavolsag és a pagerank függvény. az első kiírja majd az értéket, a masodik az oldalak közötti távolság négyzetgyökét adja meg, a harmadik pedig kiszámítja a paerank értéket.
            A mainben deklaráljuk a pagerank matrixot, és kiiratjuk az értéket.
        </para>
    </section>

    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
            Írj R szimulációt a Brun tétel demonstrálására!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/xbYhp9G6VqQ">https://youtu.be/xbYhp9G6VqQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R</link>
        </para>
        <para  >
            Tanulságok, tapasztalatok, magyarázat: A Brun-tétel azt írja le, hogy az ikerprímszámok reciprokaiból képzett sor összege véges vagy végtelen sor konvergens, ami azt jelenti,
            hogy ezek a törtek összeadva egy határt adnak ki pontosan vagy azt át nem lépve növekednek. A program ezeknek az ikerprímeknek összegzet reciprokait rajzolja ki.
        </para>
        <programlisting language="c"><![CDATA[
        library(matlab)
        stp <- function(x){
        primes = primes(x)
        diff = primes[2:length(primes)]-primes[1:length(primes)-1]
        idx = which(diff==2)
        t1primes = primes[idx]
        t2primes = primes[idx]+2
        rt1plust2 = 1/t1primes+1/t2primes
        return(sum(rt1plust2))
        }
        x=seq(13, 1000000, by=10000)
        y=sapply(x, FUN = stp)
        plot(x,y,type="b")

        ]]></programlisting> 
    </section>
    
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <para>
            Írj R szimulációt a Monty Hall problémára!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan">https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat: A Monthy Hall probléma arról szól, hogy van 3 ajtó, ami közül választhatunk (és az egyik mögött nyeremény van).
            Van lehetőségünk választani a háromból egyet, majd miután ezt megtettük a "játékmester" kinyit a maradék két ajtóból egyet ami mögött nincs semmi.
            Ezután a hátralévő 2 ajtóból nagyobb esélyünk van eltalálni azt az ajtót amelyik mögött a nyeremény van, hogyha változtatunk a döntésünkön.
        </para>
        <figure>
	<title>Monty Hall paradoxon - Bátfai Norbert</title>
	<para>
	<mediaobject>
		<imageobject>
		<imagedata fileref="img/monty.png" format="PNG"/>
		</imageobject>
	</mediaobject>
	</para>
	</figure>
    </section>

</chapter>                
